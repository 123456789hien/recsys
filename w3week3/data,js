// data.js — Responsible for loading and parsing MovieLens data

let movies = [];
let ratings = [];
let numUsers = 0;
let numMovies = 0;

async function loadData() {
  try {
    // Load local files (place u.item and u.data in the same folder as index.html)
    const [itemsResp, ratingsResp] = await Promise.all([
      fetch("./u.item"),
      fetch("./u.data")
    ]);

    const [itemsText, ratingsText] = await Promise.all([
      itemsResp.text(),
      ratingsResp.text()
    ]);

    movies = parseItemData(itemsText);
    ratings = parseRatingData(ratingsText);

    numUsers = Math.max(...ratings.map(r => r.userId)) + 1;
    numMovies = Math.max(...ratings.map(r => r.movieId)) + 1;

    console.log(`✅ Loaded ${movies.length} movies, ${ratings.length} ratings.`);
  } catch (err) {
    document.getElementById("result").innerText = "❌ Error loading data.";
    console.error(err);
  }
}

function parseItemData(text) {
  const lines = text.trim().split("\n");
  return lines.map(line => {
    const parts = line.split("|");
    return {
      movieId: parseInt(parts[0]) - 1, // zero-based indexing
      title: parts[1]
    };
  });
}

function parseRatingData(text) {
  const lines = text.trim().split("\n");
  return lines.map(line => {
    const parts = line.split("\t");
    return {
      userId: parseInt(parts[0]) - 1, // zero-based indexing
      movieId: parseInt(parts[1]) - 1,
      rating: parseFloat(parts[2])
    };
  });
}
