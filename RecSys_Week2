<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Movie Recommender</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    select, button { margin: 10px 0; padding: 5px; }
    .recommendations { margin-top: 20px; }
  </style>
</head>
<body>
  <h2>Simple Movie Recommendation System</h2>
  <label for="movieSelect">Choose a movie you like:</label>
  <select id="movieSelect"></select>
  <br>
  <button onclick="recommend()">Get Recommendations</button>

  <div class="recommendations">
    <h3>Recommended Movies:</h3>
    <ul id="recommendList"></ul>
  </div>

  <script>
    let movies = {};
    let ratings = [];

    // Load dataset files
    async function loadData() {
      const itemsText = await fetch('u.item').then(res => res.text());
      const dataText = await fetch('u.data').then(res => res.text());

      // Parse u.item (movie list)
      itemsText.split('\n').forEach(line => {
        const parts = line.split('|');
        if (parts.length > 1) {
          const id = parts[0];
          const title = parts[1];
          movies[id] = { id, title };
        }
      });

      // Parse u.data (ratings)
      dataText.split('\n').forEach(line => {
        const parts = line.split('\t');
        if (parts.length > 2) {
          ratings.push({ user: parts[0], movie: parts[1], rating: parseInt(parts[2]) });
        }
      });

      // Fill dropdown
      const select = document.getElementById('movieSelect');
      Object.values(movies).slice(0, 200).forEach(m => { // limit for performance
        const option = document.createElement('option');
        option.value = m.id;
        option.textContent = m.title;
        select.appendChild(option);
      });
    }

    // Recommend movies based on co-occurrence
    function recommend() {
      const selectedMovie = document.getElementById('movieSelect').value;

      // Find users who liked this movie
      const users = ratings.filter(r => r.movie === selectedMovie && r.rating >= 4).map(r => r.user);

      // Find other movies those users also liked
      let counts = {};
      users.forEach(user => {
        ratings.filter(r => r.user === user && r.rating >= 4 && r.movie !== selectedMovie)
          .forEach(r => {
            counts[r.movie] = (counts[r.movie] || 0) + 1;
          });
      });

      // Sort by frequency
      const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);

      // Pick top 3
      const top = sorted.slice(0, 3).map(entry => movies[entry[0]].title);

      // Show recommendations
      const list = document.getElementById('recommendList');
      list.innerHTML = '';
      top.forEach(title => {
        const li = document.createElement('li');
        li.textContent = title;
        list.appendChild(li);
      });
    }

    loadData();
  </script>
</body>
</html>
